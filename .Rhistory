theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
ggplot() +
geom_sf(data = cart_data[0], aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = 2018) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
generate_cart_data <- function(y) {
df <- read_csv(here('data', 'clean', 'year_county_data.csv')) %>%
rename('GEOID' = 'FIP') %>%
filter(grepl('^06', GEOID) & year == y) %>%
mutate(customer = ifelse(is.na(customer), 0, customer))
payment_data <- left_join(map_projection, df.2018, by="GEOID") %>%
mutate(customer = ifelse(is.na(customer), 0, customer))
start.time <- Sys.time()
cart.map <-  cartogram_cont(payment_data, weight="customer", itermax=15)
end.time <- Sys.time()
print('cartogram timer:')
print(end.time - start.time)
cart.map
}
cart_data = map(2018:2020, generate_cart_data)
ggplot() +
geom_sf(data = cart_data[0], aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = 2018) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
ggplot() +
geom_sf(data = cart_data[1], aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = 2018) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
type(cart_data[1])
class(cart_data)
class(cart_data[0])
class(cart_data[1])
cart_data
ggplot() +
geom_sf(data = cart_data[[1]], aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = 2018) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
ggplot() +
geom_sf(data = cart_data[[2]], aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = 2018) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
ggplot() +
geom_sf(data = cart_data[[3]], aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = 2018) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
map.2020
map.2019
if (!("pacman" %in% rownames(utils::installed.packages()))) {
utils::install.packages("pacman")
}
library(pacman)
p_load(dplyr, magrittr, knitr, ggplot2, stargazer, grid, gridExtra, beepr, devtools, tidyverse, rlang, arrow, here, cartogram, maptools, sf)
devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr)
grid.arrange(map.2018, map.2019, map.2020)
map.2018
map.2019
map.2020
generate_cart_data <- function(y) {
df <- read_csv(here('data', 'clean', 'year_county_data.csv')) %>%
rename('GEOID' = 'FIP') %>%
filter(grepl('^06', GEOID) & year == y) %>%
mutate(customer = ifelse(is.na(customer), 0, customer))
payment_data <- left_join(map_projection, df, by="GEOID") %>%
mutate(customer = ifelse(is.na(customer), 0, customer))
start.time <- Sys.time()
cart.map <-  cartogram_cont(payment_data, weight="customer", itermax=15)
end.time <- Sys.time()
print('cartogram timer:')
print(end.time - start.time)
cart.map
}
cart_data = map(2018:2020, generate_cart_data)
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = "Cartogram - Counties sized by number of program participants",
subtitle = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020)
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1)
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 20,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=20,font=3)))
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 15,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=20,font=3)))
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=20,font=3)))
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = "Sized by # of Participants, Fill by Payment ($)")
?gpar
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold', font=3)))
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
?margin
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=0)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(b=1)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(b=1)),
plot.margin=(margin(0,0,0,0)))
}
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(b=10)),
plot.margin=(margin(0,0,0,0)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)),
plot.margin=(margin(0,0,0,0)))
}
map.2018 <- generate_map(2018, cart_data[[1]])
map.2019 <- generate_map(2019, cart_data[[2]])
map.2020 <- generate_map(2020, cart_data[[3]])
grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
ggsave(here('output', 'maps', 'cartogram', 'poster'))
ggsave(here('output', 'maps', 'cartogram', 'poster'), g)
?ggsave
ggsave(here('output', 'maps', 'cartogram', 'poster'), plot=g)
ggsave(here('output', 'maps', 'cartogram', 'poster'), plot=g, device='png')
g <- grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
ggsave(here('output', 'maps', 'cartogram', 'poster'), plot=g, device='png')
ggsave(here('output', 'maps', 'cartogram', 'poster.png'), plot=g)
?grid.arrange
g <- grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1, padding=.5,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
g <- grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1, padding=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
g <- grid.arrange(map.2018, map.2019, map.2020, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
g
if (!("pacman" %in% rownames(utils::installed.packages()))) {
utils::install.packages("pacman")
}
library(pacman)
p_load(dplyr, magrittr, knitr, ggplot2, stargazer, grid, gridExtra, beepr, devtools, tidyverse, rlang, arrow, here, cartogram, maptools, sf)
devtools::install_github("UrbanInstitute/urbnmapr")
library(urbnmapr)
### Load Geographic Data (Shapefiles)
camap <- read_sf(unzip(here('data','basemaps/us_county.zip'))[4]) %>%
filter(STATEFP == '06')
# camap %>% ggplot()+ geom_sf(aes(fill=ALAND))
# statemap <- read_sf(unzip(here('data','basemaps', 'us_state.zip'))[4])
map_projection <- st_transform(camap, crs=3310)
label_fun <- function(breaks) {
labels <- breaks / 1000000
return(labels)
}
generate_cart_data <- function(y) {
df <- read_csv(here('data', 'clean', 'year_county_data.csv')) %>%
rename('GEOID' = 'FIP') %>%
filter(grepl('^06', GEOID) & year == y) %>%
mutate(customer = ifelse(is.na(customer), 0, customer))
payment_data <- left_join(map_projection, df, by="GEOID") %>%
mutate(customer = ifelse(is.na(customer), 0, customer))
start.time <- Sys.time()
cart.map <-  cartogram_cont(payment_data, weight="customer", itermax=15)
end.time <- Sys.time()
print('cartogram timer:')
print(end.time - start.time)
cart.map
}
years = 2017:2019
cart_data = map(2018:2020, generate_cart_data)
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)),
plot.margin=(margin(0,0,0,0)))
}
map.1 <- generate_map(years[[1]], cart_data[[1]])
map.2 <- generate_map(years[[2]], cart_data[[2]])
map.3 <- generate_map(years[[3]], cart_data[[3]])
g <- grid.arrange(map.1, map.2, map.3, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
g
g
g
years = 2017:2019
cart_data = map(years, generate_cart_data)
generate_map <- function(y, cart_data){
ggplot() +
geom_sf(data = cart_data, aes(fill=payment)) +
labs(title = y) +
scale_fill_gradientn(
colours = hcl.colors(3, "GnBu", rev = TRUE),
labels = label_fun,
n.breaks = 10,
guide = guide_colorsteps(
barwidth = 10,
barheight = 0.5,
title = "million ($)",
title.position = "right",
title.vjust = 0.1)) +
theme_void() +
theme(legend.position = 'top',
legend.text = element_text(angle = 45,
margin = margin(t=7)),
plot.margin=(margin(0,0,0,0)))
}
map.1 <- generate_map(years[[1]], cart_data[[1]])
map.2 <- generate_map(years[[2]], cart_data[[2]])
map.3 <- generate_map(years[[3]], cart_data[[3]])
g <- grid.arrange(map.1, map.2, map.3, ncol=3, nrow=1,
top = textGrob("Sized by # of Participants, Fill by Payment ($)",gp=gpar(fontsize=15,fontface='bold')))
g
ggsave(here('output', 'maps', 'cartogram', 'poster.png'), plot=g)
